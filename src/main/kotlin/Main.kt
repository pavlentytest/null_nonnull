


fun main() {

/*
    Самым распространённым подводным камнем многих языков программирования,
    в том числе Java, является попытка произвести доступ к null значению.
    Это приводит к ошибке. В Java такая ошибка называется NullPointerException (сокр. NPE).

    В Kotlin NPE могут возникать только в случае:

    1) Явного указания throw NullPointerException();
    2) Использования оператора !!;
    + есть еще несколько вариантов, например при вызове внешнего Java кода
*/
    //throw NullPointerException();

    // В Котлине Kotlin различает ссылки на те, которые могут иметь значение null (nullable ссылки)
    // и те, которые таковыми быть не могут (non-null ссылки). К примеру, переменная
    // часто используемого типа String не может быть null.

    var a: String = "abc" // Обычная инициализация означает non-null значение по умолчанию
   //// a = null // ошибка компиляции

    // Теперь, при вызове метода с использованием переменной a,
    // исключены какие-либо NPE. Вы спокойно можете писать:
    val l1 = a.length

    // Для того чтобы разрешить null значение, вы можете объявить эту строковую переменную как String?.

    var b: String? = "abc" // null-значения возможны
    b = null // ok

        //  val l2 = b.length // ошибка: переменная `b` может быть null

    // решение 1
      val l2 = if (b != null) b.length else -1
    // решение 2 - это использование оператора безопасного вызова ?.
    println(b?.length)
    // решение 3  - elvis оператор
    val l22 = b?.length ?: -1


    // Для любителей NPE существует третий способ: оператор not-null (!!)
    // преобразует любое значение в non-null тип и выдает исключение,
    // если значение равно null. Вы можете написать k!! и это вернёт нам либо non-null значение k
    // (в нашем примере вернётся String), либо выкинет NPE, если k равно null.

    var k: String = "abc"
    val l5 = k!!.length

}
